// Generated by gencpp from file tm_msgs/defect_detectRequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_DEFECT_DETECTREQUEST_H
#define TM_MSGS_MESSAGE_DEFECT_DETECTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct defect_detectRequest_
{
  typedef defect_detectRequest_<ContainerAllocator> Type;

  defect_detectRequest_()
    : function()  {
    }
  defect_detectRequest_(const ContainerAllocator& _alloc)
    : function(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_type;
  _function_type function;





  typedef boost::shared_ptr< ::tm_msgs::defect_detectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::defect_detectRequest_<ContainerAllocator> const> ConstPtr;

}; // struct defect_detectRequest_

typedef ::tm_msgs::defect_detectRequest_<std::allocator<void> > defect_detectRequest;

typedef boost::shared_ptr< ::tm_msgs::defect_detectRequest > defect_detectRequestPtr;
typedef boost::shared_ptr< ::tm_msgs::defect_detectRequest const> defect_detectRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::defect_detectRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::defect_detectRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::defect_detectRequest_<ContainerAllocator2> & rhs)
{
  return lhs.function == rhs.function;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::defect_detectRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::defect_detectRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::defect_detectRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::defect_detectRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::defect_detectRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af5ba59fe4027f23dab5f1c34b5c6c89";
  }

  static const char* value(const ::tm_msgs::defect_detectRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf5ba59fe4027f23ULL;
  static const uint64_t static_value2 = 0xdab5f1c34b5c6c89ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/defect_detectRequest";
  }

  static const char* value(const ::tm_msgs::defect_detectRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string function \n"
;
  }

  static const char* value(const ::tm_msgs::defect_detectRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.function);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct defect_detectRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::defect_detectRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::defect_detectRequest_<ContainerAllocator>& v)
  {
    s << indent << "function: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_DEFECT_DETECTREQUEST_H
