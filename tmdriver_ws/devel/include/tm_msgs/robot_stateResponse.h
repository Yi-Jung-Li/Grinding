// Generated by gencpp from file tm_msgs/robot_stateResponse.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ROBOT_STATERESPONSE_H
#define TM_MSGS_MESSAGE_ROBOT_STATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct robot_stateResponse_
{
  typedef robot_stateResponse_<ContainerAllocator> Type;

  robot_stateResponse_()
    : joint_state()
    , end_effect()  {
    }
  robot_stateResponse_(const ContainerAllocator& _alloc)
    : joint_state(_alloc)
    , end_effect(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_state_type;
  _joint_state_type joint_state;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _end_effect_type;
  _end_effect_type end_effect;





  typedef boost::shared_ptr< ::tm_msgs::robot_stateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::robot_stateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct robot_stateResponse_

typedef ::tm_msgs::robot_stateResponse_<std::allocator<void> > robot_stateResponse;

typedef boost::shared_ptr< ::tm_msgs::robot_stateResponse > robot_stateResponsePtr;
typedef boost::shared_ptr< ::tm_msgs::robot_stateResponse const> robot_stateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::robot_stateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::robot_stateResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::robot_stateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joint_state == rhs.joint_state &&
    lhs.end_effect == rhs.end_effect;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::robot_stateResponse_<ContainerAllocator1> & lhs, const ::tm_msgs::robot_stateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::robot_stateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::robot_stateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::robot_stateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4802ef3f32ba280daab2fbfb5f167fd4";
  }

  static const char* value(const ::tm_msgs::robot_stateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4802ef3f32ba280dULL;
  static const uint64_t static_value2 = 0xaab2fbfb5f167fd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/robot_stateResponse";
  }

  static const char* value(const ::tm_msgs::robot_stateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_state\n"
"float64[] end_effect \n"
"\n"
;
  }

  static const char* value(const ::tm_msgs::robot_stateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_state);
      stream.next(m.end_effect);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_stateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::robot_stateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::robot_stateResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint_state[]" << std::endl;
    for (size_t i = 0; i < v.joint_state.size(); ++i)
    {
      s << indent << "  joint_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_state[i]);
    }
    s << indent << "end_effect[]" << std::endl;
    for (size_t i = 0; i < v.end_effect.size(); ++i)
    {
      s << indent << "  end_effect[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_effect[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ROBOT_STATERESPONSE_H
