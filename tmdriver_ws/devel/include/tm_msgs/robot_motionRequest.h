// Generated by gencpp from file tm_msgs/robot_motionRequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ROBOT_MOTIONREQUEST_H
#define TM_MSGS_MESSAGE_ROBOT_MOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct robot_motionRequest_
{
  typedef robot_motionRequest_<ContainerAllocator> Type;

  robot_motionRequest_()
    : goal_format()
    , motion_type()
    , goal()
    , velocity_scaling_factor(0.0)
    , constraints(false)
    , plan_name()
    , plan_index(0)
    , move_to_plan_first_pose(false)  {
    }
  robot_motionRequest_(const ContainerAllocator& _alloc)
    : goal_format(_alloc)
    , motion_type(_alloc)
    , goal(_alloc)
    , velocity_scaling_factor(0.0)
    , constraints(false)
    , plan_name(_alloc)
    , plan_index(0)
    , move_to_plan_first_pose(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_format_type;
  _goal_format_type goal_format;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motion_type_type;
  _motion_type_type motion_type;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_type;
  _goal_type goal;

   typedef double _velocity_scaling_factor_type;
  _velocity_scaling_factor_type velocity_scaling_factor;

   typedef uint8_t _constraints_type;
  _constraints_type constraints;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _plan_name_type;
  _plan_name_type plan_name;

   typedef int32_t _plan_index_type;
  _plan_index_type plan_index;

   typedef uint8_t _move_to_plan_first_pose_type;
  _move_to_plan_first_pose_type move_to_plan_first_pose;





  typedef boost::shared_ptr< ::tm_msgs::robot_motionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::robot_motionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_motionRequest_

typedef ::tm_msgs::robot_motionRequest_<std::allocator<void> > robot_motionRequest;

typedef boost::shared_ptr< ::tm_msgs::robot_motionRequest > robot_motionRequestPtr;
typedef boost::shared_ptr< ::tm_msgs::robot_motionRequest const> robot_motionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::robot_motionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tm_msgs::robot_motionRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::robot_motionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_format == rhs.goal_format &&
    lhs.motion_type == rhs.motion_type &&
    lhs.goal == rhs.goal &&
    lhs.velocity_scaling_factor == rhs.velocity_scaling_factor &&
    lhs.constraints == rhs.constraints &&
    lhs.plan_name == rhs.plan_name &&
    lhs.plan_index == rhs.plan_index &&
    lhs.move_to_plan_first_pose == rhs.move_to_plan_first_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tm_msgs::robot_motionRequest_<ContainerAllocator1> & lhs, const ::tm_msgs::robot_motionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::robot_motionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::robot_motionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::robot_motionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5d56d3ead9f6aa43a72bdca77e7dce7";
  }

  static const char* value(const ::tm_msgs::robot_motionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5d56d3ead9f6aa4ULL;
  static const uint64_t static_value2 = 0x3a72bdca77e7dce7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/robot_motionRequest";
  }

  static const char* value(const ::tm_msgs::robot_motionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string goal_format # 'JPP' or 'CPP' (Joint angle or Cartesian), 'plan' for excute certain plan \n"
"string motion_type # 'PTP' or 'line' , if goal_format is 'plan', motion_type will be the file path of plan \n"
"float64[] goal\n"
"float64 velocity_scaling_factor # Set a scaling factor for optionally reducing the maximum joint velocity. Allowed values are in (0,1]\n"
"bool constraints\n"
"string plan_name # file name of plan\n"
"int32 plan_index\n"
"bool move_to_plan_first_pose\n"
;
  }

  static const char* value(const ::tm_msgs::robot_motionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_format);
      stream.next(m.motion_type);
      stream.next(m.goal);
      stream.next(m.velocity_scaling_factor);
      stream.next(m.constraints);
      stream.next(m.plan_name);
      stream.next(m.plan_index);
      stream.next(m.move_to_plan_first_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_motionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::robot_motionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::robot_motionRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_format: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_format);
    s << indent << "motion_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_type);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "velocity_scaling_factor: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_scaling_factor);
    s << indent << "constraints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.constraints);
    s << indent << "plan_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.plan_name);
    s << indent << "plan_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plan_index);
    s << indent << "move_to_plan_first_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_to_plan_first_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ROBOT_MOTIONREQUEST_H
